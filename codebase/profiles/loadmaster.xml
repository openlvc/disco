<?xml version="1.0"?>
<!--
             This project is using the Portico Build System
             https://github.com/timpokorny/build-skeleton

                    .___.__                     
                  __| _/|__| ______ ____  ____  
                 / __ | |  |/  ___// ___\/  _ \ 
                / /_/ | |  |\___ \\  \__(  <_> )
                \____ | |__/____  >\___  >____/ 
                     \/         \/     \/       

         File: profiles/loadmaster.xml
      Purpose: Profile controlling the building of the Disco Load Master load-testing
               system. This application generates DIS-based traffic through Disco to
               support system load testing.
-->
<project name="loadmaster">

	<!-- ================================================================================= -->
	<!--                                 General Settings                                  -->
	<!-- ================================================================================= -->
	<description>
		Disco Load Master is a DIS load generator for performance testing Disco and
		other DIS-based applications
	</description>

	<!-- ==== Basic Properties ==== -->
	<property name="java.src.dir"             location="${src.dir}/java"/>
	<property name="java.build.dir"           location="${build.dir}/java"/>
	<property name="resources.jars.dir"       location="${resources.dir}/jars"/>

	<!-- ==== Source Related Properties ==== -->
	<property name="loadmaster.src.dir"       location="${java.src.dir}/loadmaster"/>
	<property name="loadmaster.build.dir"     location="${java.build.dir}/loadmaster"/>
	<property name="loadmaster.classes.dir"   location="${loadmaster.build.dir}/classes"/>
	<property name="loadmaster.sandbox.dir"   location="${dist.dir}/loadmaster-${build.version}"/>

	<!-- =========================================================== -->
	<!--                     Project Libraries                       -->
	<!-- =========================================================== -->
	<!-- ==== Library Path Definitions ==== -->
	<!-- These properties are set so that any information relating to a specific path
	     for a library can be changed in a single spot. The properties should be used
	     when defining paths and the like later in the build file -->
	<property name="log4j.dir"             location="${lib.dir}/log4j/apache-log4j-2.4.1-bin"/>

	<!-- Classpaths for individual libraries -->
	<path id="lib.log4j.classpath">
		<fileset dir="${log4j.dir}" includes="**/*.jar"/>
	</path>

	<!-- ========================== -->
	<!-- Classpath Set Declarations -->
	<!-- ========================== -->
	<path id="loadmaster.compile.classpath">
		<pathelement path="${disco.classes.dir}"/>
		<path refid="lib.log4j.classpath"/>
	</path>

	<path id="loadmaster.runtime.classpath">
		<path refid="lib.log4j.classpath"/>
	</path>

	<!-- generate the classpath for the manifest -->
	<manifestclasspath property="loadmaster.manifest.classpath" jarfile="${lib.dir}/loadmaster.jar">
		<classpath refid="loadmaster.runtime.classpath"/>
	</manifestclasspath>

	<!-- ================================================================================= -->
	<!--                                   Clean Targets                                   -->
	<!-- ================================================================================= -->
	<target name="clean" extensionOf="master.clean">
		<delete dir="${loadmaster.build.dir}"/>
	</target>

	<!-- ================================================================================= -->
	<!--                                  Compile Targets                                  -->
	<!-- ================================================================================= -->
	<!-- compile the main production code -->
	<target name="compile" extensionOf="master.compile" depends="java.compile,java.compile">
		<java-compile srcdir="${loadmaster.src.dir}"
		              outdir="${loadmaster.classes.dir}"
		              classpath="loadmaster.compile.classpath"/>
	</target>

	<!-- ================================================================================= -->
	<!--                                  Sandbox Targets                                  -->
	<!-- ================================================================================= -->
	<!--
	     The main sandbox preparation target. This will aggregate together all the various
	     required artefacts scattered around the build environment into the structure that
	     should be present when installed on a users system (relative to the sandbox dir).
	-->
	<target name="sandbox" extensionOf="master.sandbox" depends="compile,jars,java.sandbox">
		<!-- create the required directories -->
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${loadmaster.sandbox.dir}"/>

		<!-- copy across the dependant libraries -->
		<mkdir dir="${loadmaster.sandbox.dir}/lib"/>
		<copy todir="${loadmaster.sandbox.dir}/lib">
			<fileset dir="${lib.dir}">
				<include name="log4j/**/*"/>
			</fileset>
		</copy>

		<!-- copy across the resources -->
		<copy todir="${loadmaster.sandbox.dir}">
			<fileset dir="${resources.dist.dir}/loadmaster" includes="**/*"/>
		</copy>

		<!-- chmod anything in a bin directory -->
		<chmod dir="${loadmaster.sandbox.dir}" perm="777" includes="bin/**/*.sh"/>

		<!-- Run platform specific fixes such as fixing crlf for Windows bound files! -->

	</target>

	<!-- ==================================== -->
	<!--           Jar File Targets           -->
	<!-- ==================================== -->
	<!--
	     Add an extension point that all jar file generation targets can tack on to. If there
	     is only a single jar file, this is somewhat redundant, but leaving for common structure
	     across builds for other projects as well.
	-->
	<extension-point name="jars"/>

	<!-- build the main cost counter collector jar file -->
	<target name="jar.loadmaster" extensionOf="jars" depends="compile">
		<!-- construct the main collector jar file -->
		<jar destfile="${loadmaster.sandbox.dir}/lib/loadmaster.jar">
			<!-- loadmaster code -->
			<fileset dir="${loadmaster.classes.dir}" includes="**/*.class"/>
			<fileset dir="${disco.classes.dir}" includes="**/*.class"/>

			<!-- internal jar resources -->
			<fileset dir="${resources.jars.dir}/loadmaster.jar" includes="**/*"/>

			<!-- license -->
			<fileset dir="${basedir}" includes="LICENSE.disco"/>

			<!-- build.properties file for version information -->
			<fileset dir="${basedir}" includes="build.properties"/>

			<!-- MANIFEST -->
			<manifest>
				<attribute name="Product"          value="Open LVC Disco (Loadmaster)"/>
				<attribute name="Product-Version"  value="${build.version}"/>
				<attribute name="Built-By"         value="Open LVC"/>
				<attribute name="Built-Date"       value="${TODAY}"/>
				<attribute name="Main-Class"       value="org.openlvc.disco.loadmaster.Main"/>
				<attribute name="Class-Path"       value="../ ${loadmaster.manifest.classpath}"/>
				<section name="org/openlvc/disco/loadmaster">
					<attribute name="Implementation-Title" value="org.openlvc.disco.loadmaster"/>
					<attribute name="Implementation-Version" value="${build.version} (build ${build.number}) ${TODAY}"/>
					<attribute name="Implementation-Vendor" value="Open LVC"/>
				</section>
			</manifest>
		</jar>
	</target>

	<!-- ================================================================================= -->
	<!--                             Release Generation Targets                            -->
	<!-- ================================================================================= -->
	<!--
	     The parent release target. This will run a clean and then compile all code, run all
	     tests, generate a sandbox and place all additional release artefacts (such as javadoc)
	     in with it in preparation for release.
	-->
	<target name="release"
	        extensionOf="master.release"
	        depends="clean,sandbox"/>

</project>
